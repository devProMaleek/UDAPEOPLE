version: 2.1

parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
    steps:
      - run: echo << parameters.workflow-id >>
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow-id>>
            aws s3 rm s3://udapeople-<<parameters.workflow-id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow-id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow-id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            npm install
            npm run build
            npm run migrations:revert
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run back-end test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      # Checkout code from git
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text) >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["b8:d0:73:9e:f2:18:5f:ef:e2:d8:44:d3:34:ed:f9:4a"]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible aws-cli
          # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            cat backend/.env
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths: [project/backend]
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations >> migrations.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "success" ~/project/backend/migrations.txt
            then
              curl --insecure https://kvdb.io/HhQ8Xrqw5HjWQhsbuKFeUo/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "18:4f:29:2e:0f:7c:61:39:1f:9c:0a:ba:3b:f0:86:17"
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Package backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz

      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is ------$(cat inventory.txt)"
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-tests:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm aws-cli
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
             if curl -s "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 1
            else
              exit 1
            fi
      # - destroy-environment:
      #     workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #     workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  my-workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-tests:
          requires: [deploy-frontend, deploy-backend]
      # - cloudfront-update:
      #     requires: [smoke-tests]
      # - cleanup:
      #     requires: [cloudfront-update]


